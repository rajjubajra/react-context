{"version":3,"sources":["contexts/ThemeContext.js","components/Navbar.js","components/BookList.js","components/ToogleTheme.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toogleTheme","setState","Provider","value","this","props","children","Component","Navbar","Consumer","context","console","log","theme","style","background","color","className","href","id","BookList","contextType","ToogleTheme","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g1BAEO,IAAMA,EAAeC,0BAqBbC,E,2MAlBbC,MAAQ,CACNC,cAAc,EACdC,MAAO,CAACC,OAAQ,OAAQC,GAAI,OAAQC,GAAG,QACvCC,KAAO,CAACH,OAAQ,OAAQC,GAAI,OAAQC,GAAG,S,EAGzCE,YAAc,WACZ,EAAKC,SAAS,CAACP,cAAe,EAAKD,MAAMC,gB,wEAGzC,OACE,kBAACJ,EAAaY,SAAd,CAAuBC,MAAK,KAAMC,KAAKX,MAAX,CAAkBO,YAAaI,KAAKJ,eAC7DI,KAAKC,MAAMC,c,GAbeC,a,OCwDpBC,E,iLApDX,OACE,kBAAClB,EAAamB,SAAd,MAAwB,SAACC,GAEvBC,QAAQC,IAAIF,GAFuB,IAG3BhB,EAA8BgB,EAA9BhB,aAAcC,EAAgBe,EAAhBf,MAAOI,EAASW,EAATX,KACvBc,EAAQnB,EAAeC,EAAQI,EAErC,OAEE,yBAAKe,MAAO,CAACC,WAAYF,EAAMhB,GAAImB,MAAOH,EAAMjB,SAC5C,yBAAKqB,UAAU,eACb,uBAAGC,KAAK,IAAID,UAAU,kBAAkBH,MAAO,CAACE,MAAOH,EAAMjB,SAA7D,QACA,wBAAIuB,GAAG,aAAaF,UAAU,SAC5B,4BAAI,kBAAC,IAAD,CAAMH,MAAO,CAACE,MAAOH,EAAMjB,SAA3B,SACJ,4BAAI,kBAAC,IAAD,CAAMkB,MAAO,CAACE,MAAOH,EAAMjB,SAA3B,UACJ,4BAAI,kBAAC,IAAD,CAAMkB,MAAO,CAACE,MAAOH,EAAMjB,SAA3B,sB,GAlBDW,aCAfa,E,iLAMFT,QAAQC,IAAIR,KAAKM,SADV,MAE+BN,KAAKM,QAAnChB,EAFD,EAECA,aAAcC,EAFf,EAEeA,MAAOI,EAFtB,EAEsBA,KACvBc,EAAQnB,EAAeC,EAAQI,EAErC,OACE,yBAAKkB,UAAU,QACb,yBAAKA,UAAU,gBACf,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,kBAAkBH,MAAO,CAACC,WAAYF,EAAMhB,GAAImB,MAAOH,EAAMjB,SAA3E,mBACA,wBAAIqB,UAAU,kBAAkBH,MAAO,CAACC,WAAYF,EAAMhB,GAAImB,MAAOH,EAAMjB,SAA3E,wBACA,wBAAIqB,UAAU,kBAAkBH,MAAO,CAACC,WAAYF,EAAMhB,GAAImB,MAAOH,EAAMjB,SAA3E,2B,GAhBaW,aAAjBa,EAEGC,YAAc/B,EAsBR8B,QC1BTE,E,iLAIK,IAECtB,EAAgBI,KAAKM,QAArBV,YAER,OACE,6BACE,4BAAQiB,UAAU,MAAMM,QAASvB,GAAjC,qB,GAVkBO,aAApBe,EAEGD,YAAc/B,EAcRgC,QCCAE,MAZf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SD0H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1283e5d.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\n\nexport const ThemeContext = createContext();\n\nclass ThemeContextProvider extends Component {\n  state = {\n    isLightTheme: true,\n    light: {syntax: '#555', ui: '#ddd', bg:'#eee'},\n    dark:  {syntax: '#ddd', ui: '#333', bg:'#555'},\n  }\n\n  toogleTheme = () => {\n    this.setState({isLightTheme: !this.state.isLightTheme })\n  }\n  render() {\n    return (\n      <ThemeContext.Provider value={{...this.state, toogleTheme: this.toogleTheme }}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n}\n\nexport default ThemeContextProvider;\n","import React, { Component } from 'react'\nimport {ThemeContext} from '../contexts/ThemeContext';\nimport { Link } from 'react-router-dom';\n\n\nclass Navbar extends Component {\n\n  render() {\n    return(\n      <ThemeContext.Consumer>{(context) => {\n        \n        console.log(context);\n        const { isLightTheme, light, dark } = context;\n        const theme = isLightTheme ? light : dark;\n\n        return (\n\n          <nav style={{background: theme.ui, color: theme.syntax}}>\n              <div className=\"nav-wrapper\">\n                <a href=\"#\" className=\"brand-logo left\" style={{color: theme.syntax }}>Logo</a>\n                <ul id=\"nav-mobile\" className=\"right\">\n                  <li><Link style={{color: theme.syntax}}>Home</Link></li>\n                  <li><Link style={{color: theme.syntax}}>About</Link></li>\n                  <li><Link style={{color: theme.syntax}}>Contact</Link></li>\n                </ul>\n              </div>\n          </nav>\n        );\n        }}\n\n      </ThemeContext.Consumer>\n    );\n  }\n\n\n/** DIFFERENT OPTION OF CONSUMING CONTEXT-API */\n\n  // static contextType = ThemeContext;\n\n  // render() {\n  //   console.log(this.context);\n  //   const { isLightTheme, light, dark } = this.context;\n  //   const theme = isLightTheme ? light : dark;\n  //   return (\n  //     <nav style={{background: theme.bg, color: theme.syntex}}>\n  //       <div className=\"nav-wrapper\">\n  //         <a href=\"#\" className=\"brand-logo left\" style={{color: theme.syntex }}>Logo</a>\n  //         <ul id=\"nav-mobile\" className=\"right\">\n  //           <li>Home</li>\n  //           <li>About</li>\n  //           <li>Contact</li>\n  //         </ul>\n  //       </div>\n  //   </nav>\n  //   )\n  // }\n\n\n}\n\nexport default Navbar;\n","import React, { Component } from 'react'\nimport { ThemeContext } from '../contexts/ThemeContext';\n\n\n\nclass BookList extends Component {\n  \n  static contextType = ThemeContext;\n\n\n  render() {\n    console.log(this.context);\n    const { isLightTheme, light, dark } = this.context;\n    const theme = isLightTheme ? light : dark;\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-content\">\n        <ul className=\"collection\" >\n          <li className=\"collection-item\" style={{background: theme.ui, color: theme.syntax}}>The way of king</li>\n          <li className=\"collection-item\" style={{background: theme.ui, color: theme.syntax}}>The name of the wind</li>\n          <li className=\"collection-item\" style={{background: theme.ui, color: theme.syntax}}>The final empire</li>\n        </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookList;","import React, { Component } from 'react'\nimport { ThemeContext } from '../contexts/ThemeContext';\n\nclass ToogleTheme extends Component {\n\n  static contextType = ThemeContext;\n\n  render() {\n    //consume toogleTheme function from ThemeConttext file\n    const { toogleTheme } = this.context;\n\n    return (\n      <div>\n        <button className=\"btn\" onClick={toogleTheme}>Toogle Theme</button>\n      </div>\n    )\n  }\n}\n\nexport default ToogleTheme;\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport ToogleTheme from './components/ToogleTheme';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n          <Navbar />\n          <BookList />\n          <ToogleTheme />\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}